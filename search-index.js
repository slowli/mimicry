var searchIndex = JSON.parse('{\
"mimicry":{"doc":"Mocking / spying library based on lightweight function …","t":[3,3,3,8,24,8,3,8,24,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,23,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Answers","AnswersGuard","AnswersSender","CallReal","CallReal","CheckRealCall","EmptyGuard","Mock","Mock","MockGuard","MockRef","Mut","RealCallGuard","RealCallSwitch","Shared","Static","ThreadLocal","async_scope","async_scope","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call_real","call_real","call_real_once","call_real_once","channel","clone","clone_into","default","default","default","default","default","discard","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_fn","from_value","from_value_once","from_values","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","lock","mock","new","next_for","scope","scope","send","send_all","set_as_mock","should_call_real","should_call_real","take_calls","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with","with","with_mut"],"q":["mimicry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Answers for a function call.","Guard ensuring that answers sent from an <code>AnswersSender</code> are …","Sender part of a channel created by <code>Answers::channel()</code>.","Controls delegation to real impls. The provided <code>call_*</code> …","Derives the <code>CallReal</code> trait for a struct allowing to switch …","Checks whether it is necessary to delegate to real impl …","Exclusive guard to set the mock state without an attached …","State of a mock.","Derives the <code>Mock</code> trait for a type, allowing to use it as a …","Exclusive guard to set the mock state.","Reference to a mock state used when mocking async …","A lightweight wrapper around the state (essentially, a …","Guard for the real / mock implementation switch.","Switch between real and mocked implementations.","Wrapper around <code>Mock</code> state that provides cross-thread …","Wrapper that allows creating <code>static</code>s with mock state.","Thread-local mock state wrapper.","Executes the provided future and checks that all the …","Executes the provided future under this guard and then …","","","","","","","","","","","","Returns an exclusive reference to the underlying mock.","","","","","","","","","","","","","","Delegates all calls to the mocked functions / methods to …","Delegates all calls to the mocked functions / methods to …","Delegates the first call to the mocked functions / methods …","Delegates the first call to the mocked functions / methods …","Creates a new <code>Answers</code> instance that can receive answers …","","","","","","","","Drops this guard discarding any remaining answers, so that …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Answers based on the provided function.","Answers with the provided <code>value</code> infinite number of times.","Answers with the provided <code>value</code> once. Further calls will …","Answers with values from the provided iterator. Once the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the enclosed mock state and releases the exclusive …","Locks write access to the mock state without setting the …","Injects mocking logic into a function / method.","Creates a new instance.","Selects an answer based on the specified <code>context</code>. The …","Executes the provided closure and checks that all the …","Executes the provided closure under this guard and then …","Sends a single value over the channel. The value will be …","Sends several values over the channel. The values will be …","Sets the mock state and returns an exclusive guard to the …","Performs the check.","Performs the check.","Takes contexts for recorded calls since the last call to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs an action on the mock state without releasing the …","Accesses the underlying mock state.","Accesses the underlying <code>Mut</code>able mock state."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,5,10,19,20,21,1,11,13,14,5,22,9,6,6,10,19,20,21,1,11,13,14,5,22,9,6,3,3,3,3,10,9,9,10,11,13,14,6,1,1,5,10,19,20,21,1,11,13,14,5,22,9,6,10,19,20,21,1,11,13,14,5,22,9,6,6,6,10,10,10,10,10,19,20,21,1,11,13,14,5,22,9,6,19,8,0,22,10,1,5,21,21,8,31,31,10,9,10,19,20,21,1,11,13,14,5,22,9,6,10,19,20,21,1,11,13,14,5,22,9,6,10,19,20,21,1,11,13,14,5,22,9,6,19,9,9],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],[[[5,[[0,[3,4]]]],2]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6,7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[]],[[[9,[8]]],[[9,[8]]]],[[]],[[],10],[[],11],[[],[[13,[12]]]],[[],14],[[],[[6,[15]]]],[1],[1],[[[5,[[0,[3,4]]]]]],[[[10,[16]],17],18],[[[19,[8]],17],18],[[[20,[8]],17],18],[[[21,[16]],17],18],[[[1,[16]],17],18],[[[11,[16]],17],18],[[[13,[[0,[16,12]]]],17],18],[[14,17],18],[[[5,[[0,[16,3,4]]]],17],18],[[[22,[16]],17],18],[[[9,[[0,[16,8]]]],17],18],[[[6,[16]],17],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[23],[[]],[[],6],[[],10],[[[0,[24,12]]],[[10,[[0,[24,12]]]]]],[12,[[10,[12]]]],[[],10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[19,[8]]],8],[[],20],0,[[],22],[10],[[1,25]],[[[5,[[0,[3,4]]]],25]],[21,1],[[21,26],1],[[],19],[[],27],[[],27],[10,28],[[]],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[[19,[8]],25]],[[[9,[8]],25]],[[[9,[8]],25]]],"p":[[3,"AnswersGuard"],[8,"Future"],[8,"CallReal"],[8,"Sized"],[3,"RealCallGuard"],[3,"Mut"],[8,"DerefMut"],[8,"Mock"],[3,"MockRef"],[3,"Answers"],[3,"Shared"],[8,"Send"],[3,"ThreadLocal"],[3,"RealCallSwitch"],[8,"Default"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"MockGuard"],[3,"EmptyGuard"],[3,"AnswersSender"],[3,"Static"],[15,"never"],[8,"Clone"],[8,"FnOnce"],[8,"IntoIterator"],[15,"bool"],[3,"Vec"],[4,"Result"],[3,"TypeId"],[8,"CheckRealCall"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
