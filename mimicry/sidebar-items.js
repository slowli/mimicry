window.SIDEBAR_ITEMS = {"attr":[["mock","Injects mocking logic into a function / method."]],"derive":[["CallReal","Derives the `CallReal` trait for a struct allowing to switch to real implementations for partial mocking or spying."],["Mock","Derives the `Mock` trait for a type, allowing to use it as a state for mocking."]],"struct":[["Answers","Answers for a function call."],["AnswersGuard","Guard ensuring that answers sent from an [`AnswersSender`] are timely consumed."],["AnswersSender","Sender part of a channel created by [`Answers::channel()`]."],["EmptyGuard","Exclusive guard to set the mock state without an attached state."],["MockGuard","Exclusive guard to set the mock state."],["MockRef","Reference to a mock state used when mocking async functions / methods."],["Mut","A lightweight wrapper around the state (essentially, a [`RefCell`]) allowing to easily mutate it in mock code."],["RealCallGuard","Guard for the real / mock implementation switch."],["RealCallSwitch","Switch between real and mocked implementations."],["Shared","Wrapper around `Mock` state that provides cross-thread synchronization."],["Static","Wrapper that allows creating `static`s with mock state."],["ThreadLocal","Thread-local mock state wrapper."]],"trait":[["CallReal","Controls delegation to real impls. The provided `call_*` methods in this trait can be used for partial mocking and spying."],["CheckRealCall","Checks whether it is necessary to delegate to real impl instead of the mock."],["Mock","State of a mock."]]};